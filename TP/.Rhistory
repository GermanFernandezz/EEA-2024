"face", "high", "world", "good"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% malhablado_anexo) >1){
return("VOC_MALHABLADO_ANEXO_SI")
}else{
return("VOC_MALHABLADO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_malhablado_anexo = apply(df_tm, 1, vocab_malhablado_anexo)
table(tiene_voc_malhablado_anexo)
tiene_voc_malhablado_anexo = as.data.frame(tiene_voc_malhablado_anexo)
vocab_romantico_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
romantico_anexo = c("girl", "face", "hard", "first", "damn", "miss", "leave", "ride", "guess", "play", "boy",
"touch", "lose"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% romantico_anexo) >1){
return("VOC_ROMANTICO_ANEXO_SI")
}else{
return("VOC_ROMANTICO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_romantico_anexo = apply(df_tm, 1, vocab_romantico_anexo)
table(tiene_voc_romantico_anexo)
tiene_voc_romantico_anexo = as.data.frame(tiene_voc_romantico_anexo)
df_tm_voc_anexo = cbind(df_tm, tiene_voc_malhablado_anexo, tiene_voc_malhablado,
tiene_voc_hiphop, tiene_voc_hiphop_anexo,
tiene_voc_romantic, tiene_voc_romantico_anexo)  #deberia poder agregar todos los vocabularios que quiera
df_ly_feat_voc_anexo = merge(x = cbind(lyrics_eng[-c(3,4)], df_tm_voc_anexo),
y = features[-c(14)], #para listado en ingles, saco columna artist_track que vengo arrastrando de mongo
by.x = c("artist_name","track_name"),
by.y = c("artist_name","track_name"))
table(df_ly_feat_voc_anexo$tiene_voc_malhablado, df_ly_feat_voc_anexo$tiene_voc_malhablado_index)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado, df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_hiphop, df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_romanticas_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo, df_ly_feat_voc_anexo$tiene_voc_romantic)
table(df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo, df_ly_feat_voc_anexo$tiene_voc_hiphop)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo, df_ly_feat_voc_anexo$tiene_voc_malhablado)
library(eulerr)
data <- c(HipHop=(116),
"HipHop Anexas"=(268),
"HipHop&HipHop Anexas"=100)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(16),
"HipHop Anexas"=(168),
"HipHop&HipHop Anexas"=100)
venn <- euler(data)
plot(venn)
data <- c(Vulgar=(13),
"Vulgar Anexas"=(197),
"Vulgar&Vulgar Anexas"=96)
venn <- euler(data)
plot(venn)
data <- c(Romantica=(121),
"Romantica Anexas"=(49),
"Romantica&Romantica Anexas"=133)
venn <- euler(data)
plot(venn)
##SOLO FEATURES Y VOCABULARIO
##Discretización de Posicion
#Discretizaciones basadas en Quantile
df_ly_feat_voc_ok$cat_posicion = cut(df_ly_feat_voc_ok$Posicion,
breaks = quantile(df_ly_feat_voc_ok$Posicion),
labels = c("Muy Alta", "Alta","Media", "Baja"))
data <- c(HipHop=(45),
"Acousticness Alta-Muy Alta"=(168),
"HipHop&Acousticness Alta-Muy Alta"=71)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(71),
"Acousticness Media-Baja"=(195),
"HipHop&Acousticness Media-Baja"=45)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(48),
"Liveness Media-Baja"=(172),
"HipHop&Liveness Media-Baja"=68)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(52),
"Energy Media-Baja"=(176),
"HipHop&Energy Media-Baja"=64)
venn <- euler(data)
plot(venn)
data <- c(Danceability=(37),
"Danceability Media-Baja"=(161),
"HipHop&Danceability Media-Baja"=79)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(37),
"Danceability Media-Baja"=(161),
"HipHop&Danceability Media-Baja"=79)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(69),
"Danceability ALta-Muy Alta"=(192),
"HipHop&Danceability Alta-Muy Alta"=47)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(69),
"Danceability Alta-Muy Alta"=(192),
"HipHop&Danceability Alta-Muy Alta"=47)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(64),
"Energy Alta-Muy Alta"=(187),
"HipHop&Energy Alta-Muy Alta"=52)
venn <- euler(data)
plot(venn)
data <- c(HipHop=(68),
"Liveness Alta-Muy Alta"=(191),
"HipHop&Liveness Alta-Muy Alta"=48)
venn <- euler(data)
plot(venn)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo, df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo, df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
vocab_hiphop_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
hiphop_anexo = c("smoke", "lil","money", "die", "real", "man","bout","head", "life", "world"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% hiphop_anexo) >0){
return("VOC_HIPHOP_ANEXO_SI")
}else{
return("VOC_HIPHOP_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_hiphop_anexo = apply(df_tm, 1, vocab_hiphop_anexo)
table(tiene_voc_hiphop_anexo)
tiene_voc_hiphop_anexo = as.data.frame(tiene_voc_hiphop_anexo)
vocab_malhablado_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
malhablado_anexo = c("smoke", "lil", "money", "top", "hit", "boy", "bout", "man", "girl","face", "high",
"world", "good"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% malhablado_anexo) >0){
return("VOC_MALHABLADO_ANEXO_SI")
}else{
return("VOC_MALHABLADO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_malhablado_anexo = apply(df_tm, 1, vocab_malhablado_anexo)
table(tiene_voc_malhablado_anexo)
tiene_voc_malhablado_anexo = as.data.frame(tiene_voc_malhablado_anexo)
vocab_romantico_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
romantico_anexo = c("girl", "face", "hard", "first", "damn", "miss", "leave", "ride", "guess", "play", "boy",
"touch", "lose"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% romantico_anexo) >0){
return("VOC_ROMANTICO_ANEXO_SI")
}else{
return("VOC_ROMANTICO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_romantico_anexo = apply(df_tm, 1, vocab_romantico_anexo)
table(tiene_voc_romantico_anexo)
tiene_voc_romantico_anexo = as.data.frame(tiene_voc_romantico_anexo)
df_tm_voc_anexo = cbind(df_tm, tiene_voc_malhablado_anexo, tiene_voc_malhablado,
tiene_voc_hiphop, tiene_voc_hiphop_anexo,
tiene_voc_romantic, tiene_voc_romantico_anexo)  #deberia poder agregar todos los vocabularios que quiera
df_ly_feat_voc_anexo = merge(x = cbind(lyrics_eng[-c(3,4)], df_tm_voc_anexo),
y = features[-c(14)], #para listado en ingles, saco columna artist_track que vengo arrastrando de mongo
by.x = c("artist_name","track_name"),
by.y = c("artist_name","track_name"))
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo, df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
vocab_hiphop_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
hiphop_anexo = c("smoke", "lil","money", "die", "real", "man","bout","head", "life", "world"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% hiphop_anexo) >1){
return("VOC_HIPHOP_ANEXO_SI")
}else{
return("VOC_HIPHOP_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_hiphop_anexo = apply(df_tm, 1, vocab_hiphop_anexo)
table(tiene_voc_hiphop_anexo)
tiene_voc_hiphop_anexo = as.data.frame(tiene_voc_hiphop_anexo)
vocab_malhablado_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
malhablado_anexo = c("smoke", "lil", "money", "top", "hit", "boy", "bout", "man", "girl","face", "high",
"world", "good"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% malhablado_anexo) >1){
return("VOC_MALHABLADO_ANEXO_SI")
}else{
return("VOC_MALHABLADO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_malhablado_anexo = apply(df_tm, 1, vocab_malhablado_anexo)
table(tiene_voc_malhablado_anexo)
tiene_voc_malhablado_anexo = as.data.frame(tiene_voc_malhablado_anexo)
vocab_romantico_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
romantico_anexo = c("girl", "face", "hard", "first", "damn", "miss", "leave", "ride", "guess", "play", "boy",
"touch", "lose"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% romantico_anexo) >1){
return("VOC_ROMANTICO_ANEXO_SI")
}else{
return("VOC_ROMANTICO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_romantico_anexo = apply(df_tm, 1, vocab_romantico_anexo)
table(tiene_voc_romantico_anexo)
tiene_voc_romantico_anexo = as.data.frame(tiene_voc_romantico_anexo)
df_tm_voc_anexo = cbind(df_tm, tiene_voc_malhablado_anexo, tiene_voc_malhablado,
tiene_voc_hiphop, tiene_voc_hiphop_anexo,
tiene_voc_romantic, tiene_voc_romantico_anexo)  #deberia poder agregar todos los vocabularios que quiera
df_ly_feat_voc_anexo = merge(x = cbind(lyrics_eng[-c(3,4)], df_tm_voc_anexo),
y = features[-c(14)], #para listado en ingles, saco columna artist_track que vengo arrastrando de mongo
by.x = c("artist_name","track_name"),
by.y = c("artist_name","track_name"))
vocab_hiphop_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
hiphop_anexo = c("smoke", "lil","money", "top", "die", "god", "real", "man","bout","head", "life", "world"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% hiphop_anexo) >1){
return("VOC_HIPHOP_ANEXO_SI")
}else{
return("VOC_HIPHOP_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_hiphop_anexo = apply(df_tm, 1, vocab_hiphop_anexo)
table(tiene_voc_hiphop_anexo)
tiene_voc_hiphop_anexo = as.data.frame(tiene_voc_hiphop_anexo)
vocab_malhablado_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
malhablado_anexo = c("hoes, smoke", "lil", "money", "top", "hit", "boy", "bout", "man", "girl","face", "high",
"world", "good"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% malhablado_anexo) >1){
return("VOC_MALHABLADO_ANEXO_SI")
}else{
return("VOC_MALHABLADO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_malhablado_anexo = apply(df_tm, 1, vocab_malhablado_anexo)
table(tiene_voc_malhablado_anexo)
tiene_voc_malhablado_anexo = as.data.frame(tiene_voc_malhablado_anexo)
vocab_romantico_anexo = function(x){
# Esta función compara si alguna de las palabras presentes
# es un término del glosario hiphop
x = as.data.frame(t(x))
romantico_anexo = c("girl", "face", "hard", "first", "damn", "miss", "leave", "ride", "guess", "play", "boy",
"touch", "lose"
)
if(sum(names(x[-which(colSums(x)==0)]) %in% romantico_anexo) >1){
return("VOC_ROMANTICO_ANEXO_SI")
}else{
return("VOC_ROMANTICO_ANEXO_NO")
}
}
# Aplico la función vocab_hiphop al df de términos x documentos
tiene_voc_romantico_anexo = apply(df_tm, 1, vocab_romantico_anexo)
table(tiene_voc_romantico_anexo)
tiene_voc_romantico_anexo = as.data.frame(tiene_voc_romantico_anexo)
df_tm_voc_anexo = cbind(df_tm, tiene_voc_malhablado_anexo, tiene_voc_malhablado,
tiene_voc_hiphop, tiene_voc_hiphop_anexo,
tiene_voc_romantic, tiene_voc_romantico_anexo)  #deberia poder agregar todos los vocabularios que quiera
df_ly_feat_voc_anexo = merge(x = cbind(lyrics_eng[-c(3,4)], df_tm_voc_anexo),
y = features[-c(14)], #para listado en ingles, saco columna artist_track que vengo arrastrando de mongo
by.x = c("artist_name","track_name"),
by.y = c("artist_name","track_name"))
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo)
table(df_ly_feat_voc_anexo$tiene_voc_malhablado_anexo, df_ly_feat_voc_anexo$tiene_voc_malhablado)
data <- c(Vulgares=(19),
"Vulgares Anexas"=(105),
"Vulgares&Vulgares Anexas"=90)
venn <- euler(data)
plot(venn)
table(df_ly_feat_voc_anexo$tiene_voc_romantico_anexo, df_ly_feat_voc_anexo$tiene_voc_romantic)
data <- c(Romanticas=(121),
"Romanticas Anexas"=(49),
"Romanticas&Romanticas Anexas"=133)
venn <- euler(data)
plot(venn)
table(df_ly_feat_voc_anexo$tiene_voc_hiphop_anexo, df_ly_feat_voc_anexo$tiene_voc_hiphop)
data <- c(HipHop=(33),
"HipHop Anexas"=(85),
"HipHop&HipHop Anexas"=83)
venn <- euler(data)
plot(venn)
sessionInfo()$basePkgs
sessionInfo()
serRepositories(
)
setRepositories()
setRepositories()
setRepositories(graphics = T)
setRepositories(graphics = TRUE)
getCRANmirrors()
chooseCRANmirror()
installed.packages()
nrow(installed.packages())
rownames(installed.packages())
packages <- available.packages()
packages[grep("imma", packages[,"Package"]),1:2]
install.packages(paks = "limma", dependencies = TRUE)
install.packages(pkgs = "limma", dependencies = TRUE)
old.packages()
help("limma")
help(limma)
y <- c(1, 2, 4)
mean(y)
y <- c(1, 2, na)
y <- c(1, 2, NA)
mean(y)
airquality
fit <- lm(Ozone ~ Wind, data = airquality, na.action = na.omit)
plot(fit)
View(fit)
airquality2 <- cbind(airquality, predict(fit))
predict(fit)
View(fit)
View(fit)
data <- airquality[, c("Ozone", "Solar.R", "Wind")]
View(data)
mu <- colMeans(data, na.rm = TRUE)
cv <- cov(data, use = "pairwise")
library(lavaan)
install.packages("lavaan")
library(lavaan)
fit <- lavaan("Ozone ~ 1 + Wind + Solar.R
Ozone ~~ Ozone",
sample.mean = mu, sample.cov = cv,
sample.nobs = sum(complete.cases(data)))
View(fit)
BiocManager::install("rpx")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rpx")
library("rpx")
px <- PXDataset("PXD000864")
px <- PXDataset("PXD000864")
px
BiocManager::install("proteoQC")
data("mtcars")
data("flower")
force(mtcars)
data("iris")
force(iris)
install.packages("tidyverse")
library(tidyverse)
library(data.table)
# Crear un data.table de ejemplo
df <- data.table(
date = seq.Date(as.Date("2023-01-01"), by = "day", length.out = 10),
value = c(100, 110, 115, 120, 125, 130, 128, 127, 130, 135)
)
View(df)
# Crear una columna con lag de 1 y 2 días usando la función shift
df[, lag_1 := shift(value, 1)]
df[, lag_2 := shift(value, 2)]
# Crear un data.table de ejemplo con identificadores repetidos
df <- data.table(
id = rep(1:2, each = 5),
date = rep(seq.Date(as.Date("2023-01-01"), by = "day", length.out = 5), 2),
value1 = c(100, 110, 115, 120, 125, 200, 210, 215, 220, 225),
value2 = c(50, 55, 60, 65, 70, 80, 85, 90, 95, 100),
target = c(1, 0, 1, 0, 1, 1, 0, 1, 0, 1)
)
View(df)
# Crear una lista de columnas a las que se les aplicará el lag
variables_con_lag <- c("value1", "value2")
# Aplicar el lag por grupo (en este caso, por id)
df[, (paste0(variables_con_lag, "_lag1")) := lapply(.SD, shift, n = 1),
by = id, .SDcols = variables_con_lag]
# Crear un data.table de ejemplo con varias columnas
df <- data.table(
id = rep(1:2, each = 5),
date = rep(seq.Date(as.Date("2023-01-01"), by = "day", length.out = 5), 2),
value1 = c(100, 110, 115, 120, 125, 200, 210, 215, 220, 225),
value2 = c(50, 55, 60, 65, 70, 80, 85, 90, 95, 100),
value3 = c(10, 12, 14, 16, 18, 20, 22, 24, 26, 28),
value4 = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
target = c(1, 0, 1, 0, 1, 1, 0, 1, 0, 1)
)
View(df)
# Seleccionar las columnas por posición (del 3 al 6 en este caso, sin incluir la target)
# En este caso, las columnas "value1", "value2", "value3", "value4"
start_col <- 3
end_col <- 6
# Crear lag solo en las columnas seleccionadas por posición
df[, (paste0(names(df)[start_col:end_col], "_lag1")) := lapply(.SD, shift, n = 1),
by = id, .SDcols = start_col:end_col]
# Crear un data.table de ejemplo con varias columnas
df <- data.table(
id = rep(1:2, each = 5),
date = rep(seq.Date(as.Date("2023-01-01"), by = "day", length.out = 5), 2),
value1 = c(100, 110, 115, 120, 125, 200, 210, 215, 220, 225),
value2 = c(50, 55, 60, 65, 70, 80, 85, 90, 95, 100),
value3 = c(10, 12, 14, 16, 18, 20, 22, 24, 26, 28),
value4 = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
target = c(1, 0, 1, 0, 1, 1, 0, 1, 0, 1)
)
# Seleccionar las columnas por posición (del 3 al 6 en este caso, sin incluir la target)
# En este caso, las columnas "value1", "value2", "value3", "value4"
start_col <- 3
end_col <- 6
# Crear lag solo en las columnas seleccionadas por posición
df[, (paste0(names(df)[start_col:end_col], "_lag1")) := lapply(.SD, shift, n = 2),
by = id, .SDcols = start_col:end_col]
# Crear un data.table de ejemplo con varias columnas
df <- data.table(
id = rep(1:2, each = 5),
date = rep(seq.Date(as.Date("2023-01-01"), by = "day", length.out = 5), 2),
value1 = c(100, 110, 115, 120, 125, 200, 210, 215, 220, 225),
value2 = c(50, 55, 60, 65, 70, 80, 85, 90, 95, 100),
value3 = c(10, 12, 14, 16, 18, 20, 22, 24, 26, 28),
value4 = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
target = c(1, 0, 1, 0, 1, 1, 0, 1, 0, 1)
)
# Crear un data.table de ejemplo con varias columnas
df <- data.table(
id = rep(1:2, each = 5),
date = rep(seq.Date(as.Date("2023-01-01"), by = "day", length.out = 5), 2),
value1 = c(100, 110, 115, 120, 125, 200, 210, 215, 220, 225),
value2 = c(50, 55, 60, 65, 70, 80, 85, 90, 95, 100),
value3 = c(10, 12, 14, 16, 18, 20, 22, 24, 26, 28),
target = c(1, 0, 1, 0, 1, 1, 0, 1, 0, 1)
)
# Definir las columnas por posición (3 a 5, sin incluir la target)
start_col <- 3
end_col <- 5
# Crear múltiples lags (por ejemplo, de 1, 2, y 3 períodos)
lags <- 1:3
# Aplicar múltiples lags a las columnas seleccionadas por posición
for (lag_n in lags) {
df[, (paste0(names(df)[start_col:end_col], "_lag", lag_n)) := lapply(.SD, shift, n = lag_n),
by = id, .SDcols = start_col:end_col]
}
# Ver el resultado
print(df)
#Librerias
library(tidyverse)
library(tidymodels)
library(lubridate)
library(GGally)
library(corrplot)
library(corrr)
library(gridExtra)
library(MASS)
#Directorio de trabajo
setwd("/Users/jorgefernandez/Documents/Cienciadedatos/EEA2024/TP")
#Cargo los datos
datos <- read.csv("eph_train_2023.csv")
#Modelo propio 1----
modelo_propio1 <- lm(formula = log(salario_horario) ~ educacion +
region +
log(experiencia_potencial),
data = datos)
#Modelo propio 1----
modelo_propio1 <- lm(formula = log(salario_horario) ~ educacion +
region +
log(experiencia_potencial+1),
data = datos)
summary(modelo_propio1)
unique(datos$region)
#Librerias
library(tidyverse)
library(tidymodels)
library(lubridate)
library(GGally)
library(corrplot)
library(corrr)
library(gridExtra)
library(MASS)
#Directorio de trabajo
setwd("/Users/jorgefernandez/Documents/Cienciadedatos/EEA2024/TP")
#Cargo los datos
datos <- read.csv("eph_train_2023.csv")
unique(datos$aglomerado)
unique(datos$asistencia_educacion)
unique(datos$alfabetismo)
unique(datos$categoria_ocupacion)
unique(datos$cat_cantidad_empleos)
